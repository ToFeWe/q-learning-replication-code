#! python


def build(ctx):

    for n_agents in [2, 3]:
        # TODO: Can I define a whole package as a dependency
        # In my case this would be qpricesim
        ctx(
            features="run_py_script",
            source="simulate_dev_no_dev.py",
            target=[
                ctx.path_to(
                    ctx,
                    "OUT_ANALYSIS",
                    f"array_deviation_simulations_{n_agents}_agents.pickle",
                ),
                ctx.path_to(
                    ctx,
                    "OUT_ANALYSIS",
                    f"array_no_deviation_simulations_{n_agents}_agents.pickle",
                ),
            ],
            deps=[
                ctx.path_to(
                    ctx, "OUT_DATA", f"all_super_stars_{n_agents}_agents.pickle"
                ),
                ctx.path_to(ctx, "IN_MODEL_SPECS", "deviation_simulation.json"),
                ctx.path_to(ctx, "IN_ANALYSIS", "utils_simulate_play.py"),
                ctx.path_to(
                    ctx,
                    "IN_SIMULATION_PARAMETER",
                    f"parameter_{n_agents}_agent_base.json",
                ),
            ],
            append=str(n_agents),
            name=f"simulate_dev_no_dev{n_agents}_agents",
        )

        # Check if the otree super star is IC
        ctx(
            features="run_py_script",
            source="otree_super_star_ic_check.py",
            target=[
                ctx.path_to(
                    ctx,
                    "OUT_ANALYSIS",
                    f"ic_otree_super_star_{n_agents}_agents.json",
                )
            ],
            deps=[
                ctx.path_to(
                    ctx,
                    "IN_SIMULATION_PARAMETER",
                    f"parameter_super_star_{n_agents}_agent.json",
                ),
                ctx.path_to(ctx, "IN_MODEL_SPECS", "deviation_simulation.json"),
                ctx.path_to(
                    ctx,
                    f"IN_SIMULATION_{n_agents}_AGENT",
                    f"experiment_super_star_{n_agents}_agent.pickle",
                ),
                ctx.path_to(
                    ctx,
                    "IN_ANALYSIS",
                    "check_ic.py",
                ),
                ctx.path_to(
                    ctx,
                    "IN_ANALYSIS",
                    "utils_simulate_play.py",
                ),
            ],
            append=str(n_agents),
            name=f"ic_otree_super_star_{n_agents}_agents",
        )

        # Calculate how many super star markets have an agent with IC
        # behaviour.
        ctx(
            features="run_py_script",
            source="all_super_stars_ic_check.py",
            target=[
                ctx.path_to(
                    ctx,
                    "OUT_ANALYSIS",
                    f"ic_all_super_star_{n_agents}_agents.json",
                )
            ],
            deps=[
                ctx.path_to(
                    ctx,
                    "IN_SIMULATION_PARAMETER",
                    f"parameter_super_star_{n_agents}_agent.json",
                ),
                ctx.path_to(
                    ctx,
                    f"OUT_ANALYSIS",
                    f"array_deviation_simulations_{n_agents}_agents.pickle",
                ),
                ctx.path_to(
                    ctx,
                    f"IN_ANALYSIS",
                    f"check_ic.py",
                ),
            ],
            append=str(n_agents),
            name=f"ic_all_super_star_{n_agents}_agents",
        )

        # Play simulation starting from all possible states
        ctx(
            features="run_py_script",
            source="simulate_market_all_states.py",
            target=[
                ctx.path_to(
                    ctx,
                    "OUT_ANALYSIS",
                    f"array_all_state_simulations_{n_agents}_agents.pickle",
                )
            ],
            deps=[
                ctx.path_to(
                    ctx,
                    "IN_SIMULATION_PARAMETER",
                    f"parameter_super_star_{n_agents}_agent.json",
                ),
                ctx.path_to(ctx, "IN_MODEL_SPECS", "deviation_simulation.json"),
                ctx.path_to(
                    ctx, "OUT_DATA", f"all_super_stars_{n_agents}_agents.pickle"
                ),
            ],
            append=str(n_agents),
            name=f"simulate_market_all_states{n_agents}_agents",
        )
    
    # Type clustering of the experimental data with individual choice

    for treatment in ['1H1A', '1H2A']:
        # Play simulation starting from all possible states
        ctx(
            features="run_py_script",
            source="type_clustering.py",
            target=[
                ctx.path_to(
                    ctx,
                    "OUT_ANALYSIS",
                    f"data_individual_with_types_{treatment}.pickle",
                ),
                ctx.path_to(
                    ctx,
                    "OUT_ANALYSIS",
                    f"data_individual_with_types_{treatment}.csv",
                )
            ],
            deps=[
                ctx.path_to(
                    ctx, "OUT_DATA", f"data_individual_level.pickle"
                ),
            ],
            append=treatment,
            name=f"type_clustering_{treatment}",
        )
    
    # Analysis those clusters
    ctx(
        features="run_py_script",
        source="cluster_analysis.py",
        target=[
            ctx.path_to(
                ctx, "OUT_ANALYSIS", "cluster_shares.json"
            ),
            ctx.path_to(
                ctx, "OUT_ANALYSIS", "p_values_cluster_analysis.json"
            ),
        ],
        deps=[
            ctx.path_to(
                ctx,
                "OUT_ANALYSIS",
                "data_individual_with_types_1H2A.pickle",
            ),
            ctx.path_to(
                ctx,
                "OUT_ANALYSIS",
                "data_individual_with_types_1H1A.pickle",
            ),
            ctx.path_to(
                ctx,
                "OUT_DATA",
                "data_group_level.pickle",
            )
        ],
        name="cluster_analysis",
    )

    # Calc results for algorithm section
    ctx(
        features="run_py_script",
        source="results_algo_markets.py",
        target=[
            ctx.path_to(
                ctx, "OUT_ANALYSIS", "all_results_fully_algo.json"
            )
        ],
        deps=[
            ctx.path_to(
                ctx,
                "OUT_DATA",
                "grid_3_agents.pickle",
            ),
            ctx.path_to(
                ctx,
                "OUT_DATA",
                "grid_2_agents.pickle",
            )
        ],
        name="results_algo_markets",
    )

    # Calc results for the section that compares algo and humans
    ctx(
        features="run_py_script",
        source="p_values_algo_and_humans_comparison.py",
        target=[
            ctx.path_to(
                ctx, "OUT_ANALYSIS", "all_results_comparing_algos_and_humans.json"
            )
        ],
        deps=[
            ctx.path_to(
                ctx,
                "OUT_DATA",
                "grid_3_agents.pickle",
            ),
            ctx.path_to(
                ctx,
                "OUT_DATA",
                "grid_2_agents.pickle",
            ),
            ctx.path_to(
                ctx,
                "OUT_DATA",
                "super_star_avg_prices_2_agents.pickle",
            ),
            ctx.path_to(
                ctx,
                "OUT_DATA",
                "super_star_avg_prices_3_agents.pickle",
            )
        ],
        name="p_values_algo_and_humans_comparison",
    )
    